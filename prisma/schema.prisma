// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment{
  id String @id @default(uuid())
  name String // nome do cliente
  email String?
  phone String?
  time String // hora da consulta
  appointmentDate DateTime // data e hora da consulta
  status Boolean @default(false)

  serviceId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder{
  id String @id @default(uuid())
  description String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service{
  id String @id @default(uuid())
  name String
  price Int
  duration Int
  status Boolean @default(true)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  BASIC
  PROFESSSIONAL
}

model Subscription{
  id String @id @default(uuid())
  status String
  plan Plan @default(BASIC)
  priceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// requisitos para o prisma adapter funcionar
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  address       String? @default("")
  phone         String? @default("")
  status        Boolean @default(true)
  timeZone      String? @default("America/Sao_Paulo")
  stripe_customer_id String? @default("")
  times String[] @default([])

  // relacionamento com a subscription (1 para 1)
  subscription  Subscription?

  // relacionamento com services (1 para muitos)
  services      Service[]

  // relacionamento com reminders (1 para muitos)
  reminders     Reminder[]

  // relacionamento com appointments (1 para muitos)
  appointments  Appointment[]
  
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}